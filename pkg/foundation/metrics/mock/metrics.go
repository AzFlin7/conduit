// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/foundation/metrics (interfaces: Counter,LabeledCounter,Gauge,LabeledGauge,Timer,LabeledTimer)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	metrics "github.com/conduitio/conduit/pkg/foundation/metrics"
	gomock "github.com/golang/mock/gomock"
)

// Counter is a mock of Counter interface.
type Counter struct {
	ctrl     *gomock.Controller
	recorder *CounterMockRecorder
}

// CounterMockRecorder is the mock recorder for Counter.
type CounterMockRecorder struct {
	mock *Counter
}

// NewCounter creates a new mock instance.
func NewCounter(ctrl *gomock.Controller) *Counter {
	mock := &Counter{ctrl: ctrl}
	mock.recorder = &CounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Counter) EXPECT() *CounterMockRecorder {
	return m.recorder
}

// Inc mocks base method.
func (m *Counter) Inc(arg0 ...float64) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Inc", varargs...)
}

// Inc indicates an expected call of Inc.
func (mr *CounterMockRecorder) Inc(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*Counter)(nil).Inc), arg0...)
}

// LabeledCounter is a mock of LabeledCounter interface.
type LabeledCounter struct {
	ctrl     *gomock.Controller
	recorder *LabeledCounterMockRecorder
}

// LabeledCounterMockRecorder is the mock recorder for LabeledCounter.
type LabeledCounterMockRecorder struct {
	mock *LabeledCounter
}

// NewLabeledCounter creates a new mock instance.
func NewLabeledCounter(ctrl *gomock.Controller) *LabeledCounter {
	mock := &LabeledCounter{ctrl: ctrl}
	mock.recorder = &LabeledCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *LabeledCounter) EXPECT() *LabeledCounterMockRecorder {
	return m.recorder
}

// WithValues mocks base method.
func (m *LabeledCounter) WithValues(arg0 ...string) metrics.Counter {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithValues", varargs...)
	ret0, _ := ret[0].(metrics.Counter)
	return ret0
}

// WithValues indicates an expected call of WithValues.
func (mr *LabeledCounterMockRecorder) WithValues(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithValues", reflect.TypeOf((*LabeledCounter)(nil).WithValues), arg0...)
}

// Gauge is a mock of Gauge interface.
type Gauge struct {
	ctrl     *gomock.Controller
	recorder *GaugeMockRecorder
}

// GaugeMockRecorder is the mock recorder for Gauge.
type GaugeMockRecorder struct {
	mock *Gauge
}

// NewGauge creates a new mock instance.
func NewGauge(ctrl *gomock.Controller) *Gauge {
	mock := &Gauge{ctrl: ctrl}
	mock.recorder = &GaugeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Gauge) EXPECT() *GaugeMockRecorder {
	return m.recorder
}

// Dec mocks base method.
func (m *Gauge) Dec(arg0 ...float64) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Dec", varargs...)
}

// Dec indicates an expected call of Dec.
func (mr *GaugeMockRecorder) Dec(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dec", reflect.TypeOf((*Gauge)(nil).Dec), arg0...)
}

// Inc mocks base method.
func (m *Gauge) Inc(arg0 ...float64) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Inc", varargs...)
}

// Inc indicates an expected call of Inc.
func (mr *GaugeMockRecorder) Inc(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*Gauge)(nil).Inc), arg0...)
}

// Set mocks base method.
func (m *Gauge) Set(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0)
}

// Set indicates an expected call of Set.
func (mr *GaugeMockRecorder) Set(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*Gauge)(nil).Set), arg0)
}

// LabeledGauge is a mock of LabeledGauge interface.
type LabeledGauge struct {
	ctrl     *gomock.Controller
	recorder *LabeledGaugeMockRecorder
}

// LabeledGaugeMockRecorder is the mock recorder for LabeledGauge.
type LabeledGaugeMockRecorder struct {
	mock *LabeledGauge
}

// NewLabeledGauge creates a new mock instance.
func NewLabeledGauge(ctrl *gomock.Controller) *LabeledGauge {
	mock := &LabeledGauge{ctrl: ctrl}
	mock.recorder = &LabeledGaugeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *LabeledGauge) EXPECT() *LabeledGaugeMockRecorder {
	return m.recorder
}

// WithValues mocks base method.
func (m *LabeledGauge) WithValues(arg0 ...string) metrics.Gauge {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithValues", varargs...)
	ret0, _ := ret[0].(metrics.Gauge)
	return ret0
}

// WithValues indicates an expected call of WithValues.
func (mr *LabeledGaugeMockRecorder) WithValues(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithValues", reflect.TypeOf((*LabeledGauge)(nil).WithValues), arg0...)
}

// Timer is a mock of Timer interface.
type Timer struct {
	ctrl     *gomock.Controller
	recorder *TimerMockRecorder
}

// TimerMockRecorder is the mock recorder for Timer.
type TimerMockRecorder struct {
	mock *Timer
}

// NewTimer creates a new mock instance.
func NewTimer(ctrl *gomock.Controller) *Timer {
	mock := &Timer{ctrl: ctrl}
	mock.recorder = &TimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Timer) EXPECT() *TimerMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *Timer) Update(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update.
func (mr *TimerMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*Timer)(nil).Update), arg0)
}

// UpdateSince mocks base method.
func (m *Timer) UpdateSince(arg0 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateSince", arg0)
}

// UpdateSince indicates an expected call of UpdateSince.
func (mr *TimerMockRecorder) UpdateSince(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSince", reflect.TypeOf((*Timer)(nil).UpdateSince), arg0)
}

// LabeledTimer is a mock of LabeledTimer interface.
type LabeledTimer struct {
	ctrl     *gomock.Controller
	recorder *LabeledTimerMockRecorder
}

// LabeledTimerMockRecorder is the mock recorder for LabeledTimer.
type LabeledTimerMockRecorder struct {
	mock *LabeledTimer
}

// NewLabeledTimer creates a new mock instance.
func NewLabeledTimer(ctrl *gomock.Controller) *LabeledTimer {
	mock := &LabeledTimer{ctrl: ctrl}
	mock.recorder = &LabeledTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *LabeledTimer) EXPECT() *LabeledTimerMockRecorder {
	return m.recorder
}

// WithValues mocks base method.
func (m *LabeledTimer) WithValues(arg0 ...string) metrics.Timer {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithValues", varargs...)
	ret0, _ := ret[0].(metrics.Timer)
	return ret0
}

// WithValues indicates an expected call of WithValues.
func (mr *LabeledTimerMockRecorder) WithValues(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithValues", reflect.TypeOf((*LabeledTimer)(nil).WithValues), arg0...)
}
